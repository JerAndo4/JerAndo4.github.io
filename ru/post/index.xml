<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Н.С.Кармацкий</title>
    <link>https://jerando4.github.io/ru/post/</link>
      <atom:link href="https://jerando4.github.io/ru/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ru-ru</language><lastBuildDate>Wed, 25 May 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://jerando4.github.io/media/icon_hu86205938999aca6593e9a961db894b50_22834_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://jerando4.github.io/ru/post/</link>
    </image>
    
    <item>
      <title>Как прошла моя пятая неделя</title>
      <link>https://jerando4.github.io/ru/post/5-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F/</link>
      <pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jerando4.github.io/ru/post/5-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;На пятой неделе я сделал все лабораторные работы, которые доступны на данный момент.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Я чуть-чуть разобрался в Объектно-ориентированном программирование&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Я всю неделю вкусно питался.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Я больше не знаю, что писать, поэтому я вставлю цитату Труди Гарфункеля о Большом театре:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&amp;ldquo;Балет Большого театра – это вселенная фантазии, средоточие волшебства, красоты и романтики. Это мир грациозных балерин, величественной музыки и роскошных костюмов&amp;rdquo;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Файловая Система FAT</title>
      <link>https://jerando4.github.io/ru/post/%D1%84%D0%B0%D0%B8%D0%BB%D0%BE%D0%B2%D0%B0%D1%8F-%D1%81%D0%B8c%D1%82%D0%B5%D0%BC%D0%B0-fat/</link>
      <pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jerando4.github.io/ru/post/%D1%84%D0%B0%D0%B8%D0%BB%D0%BE%D0%B2%D0%B0%D1%8F-%D1%81%D0%B8c%D1%82%D0%B5%D0%BC%D0%B0-fat/</guid>
      <description>&lt;p&gt;Файловая система – это инструмент, позволяющий операционной системе и программам обращаться к нужным файлам и работать с ними. При этом программы оперируют только названием файла, его размером и датой созданий. Все остальные функции по поиску необходимого файла в хранилище и работе с ним берет на себя файловая система накопителя&lt;/p&gt;
&lt;h2 id=&#34;что-за-файловая-система&#34;&gt;&lt;strong&gt;Что за файловая система?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Сокращенная аббревиатура «FAT» расшифровывается как «таблица размещения файлов». Это простая классическая архитектура файловой системы, изначально предназначенная для небольших дисков и простых структур папок. Инымисловами, файловая система «FAT» представляет собой групповой метод организации, в котором таблица размещения файлов выделена в отдельную логическую область и находится в начале тома. Для исключения непреднамеренных или случайных ошибок, способных повлиять на корректное отображение таблицы, система, в целях безопасности, хранит копию массива индексных указателей. Файловая система FAT используется ОС MS DOS и ОС Windows для упорядочения файлов и управления ими.&lt;/p&gt;
&lt;p&gt;Разработана Биллом Гейтсом и Марком МакДональдом (англ.) в 1976—1977 годах. Использовалась в качестве основной файловой системы в операционных системах семейств MS-DOS и Windows 9x.&lt;/p&gt;
&lt;h2 id=&#34;какие-бывают-файловые-системы-fat&#34;&gt;&lt;strong&gt;Какие бывают файловые системы FAT?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Существует несколько версий файловой системы FAT, среди которых наибольшее применение нашли файловые системы FAT 16 и FAT 32. Отличие этих файловых систем состоит в разрядности чисел, используемых в таблицах размещения файлов.&lt;/p&gt;
&lt;p&gt;Однако упоминаю еще две файловые системы :FAT12 и FAT64 или другое ее название exFAT. Дальше мы разберем их различия.&lt;/p&gt;
&lt;h2 id=&#34;файловая-система-fat12&#34;&gt;&lt;strong&gt;Файловая Система FAT12&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Файловая система, широко применяемая на гибких магнитных дисках. Является первой популярной файловой системой на IBM PC - совместимых компьютерах.&lt;/p&gt;
&lt;p&gt;Самое последнее устройство накопления информации, которое использовало файловую систему FAT12 были гибкий диск диаметром 3.5 дюйма и емкостью 1,44 МБ. Были еще дискеты размером 2,88, но они не получили большого распространения.&lt;/p&gt;
&lt;p&gt;Все пространство файловой системы FAT12 разделено на блоки, кратные размеру сектора дискеты (512 байт). В применении к дискетами размер кластера обычно выбирается равным одному сектору. Каждый непустой файл занимает минимум 1 кластер. Поэтому если на дискете будет много маленьких файлов, то много места будет пропадать зря. Максимальный размер кластера для файловой системы FAT12 составляет 8192 байта.&lt;/p&gt;
&lt;p&gt;Достоинствами ее является то, что она занимает мало места на диске, требует мало оперативной памяти для ее кэширования. Недостатком - то, что при использовании на разделах больше 64 Mб размер кластера становится максимальным, что приводит к неизбежным потерям свободного места на диске в конечном кластере каждого файла.&lt;/p&gt;
&lt;h2 id=&#34;файловая-система-fat16&#34;&gt;&lt;strong&gt;Файловая Система FAT16&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Файловая система FAT 16 поддерживается ОС MS DOS, Windows 95, Windows 98, Windows 2000, а также некоторыми версиями ОС UNIX.Цифра 16 в названии файловой системы указывает на число бит (двоичных разрядов), необходимых
для хранения информации о номерах кластеров, используемых файлом, т. е. в таблице размещения файлов можно разместить не более 65536 записей Операционная система использует Таблицу размещения файлов для поиска файла и определения кластеров, которые этот файл занимает на жестком диске. Кроме того, в Таблице фиксируются сведения о свободных и дефектных кластерах. Чтобы легче было осмыслить файловую систему FAT16 представьте
себе оглавление книги и как вы работаете с этим оглавлением, вот именно также операционная система работает с FAT 16.&lt;/p&gt;
&lt;p&gt;Максимальный размер разделов или дисков в FAT16 составляет 4,2 гигабайта.&lt;/p&gt;
&lt;p&gt;Однако в наше время FAT 16 использование неэффективно. Но она полностью удовлетворяла требованиям старых компьютеров.&lt;/p&gt;
&lt;p&gt;Современные НЖМД имеют объем памяти несколько десятков гигабайт, поэтому применение файловой системы FAT16 для них неэффективно.&lt;/p&gt;
&lt;p&gt;Второй недостаток заключается в том, что для хранения всех файловых атрибутов система FAT использует всего 1 байт. Поэтому просто не представляется возможности хранить данные о правах доступа к файлу, его владельце и т. д.&lt;/p&gt;
&lt;h2 id=&#34;файловая-система-fat32&#34;&gt;&lt;strong&gt;Файловая Система FAT32&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Файловая система FAT32 является расширенной версией файловой системы FAT16, поддержка которой была впервые реализована в Windows 95В . Файловая система FAT32 поддерживается также ОС Windows 98, Windows 2000 и Windows ХР.&lt;/p&gt;
&lt;p&gt;Основное отличие файловой системы FAT32 от FAT16 заключается в том, что в таблице размещения файлов FAT можно разместить не 65 536 записей о номерах кластерах, а 268.435.445.&lt;/p&gt;
&lt;p&gt;Одна из основных причин создания FAT32 состояла в необходимости более эффективно использовать дисковое пространство. В этой файловой системе используются кластеры меньшего размера для накопителей, емкость которых не превышает 8 Гбайт (размер кластеров при этом составляет 4 Кбайт), что позволяет на 10–15 % повысить эффективность использования дискового пространства накопителя по сравнению с накопителем в файловой системе FAT16. Кроме того, в файловой системе FAT32 увеличивается максимальный размер тома (раздела) диска.&lt;/p&gt;
&lt;h2 id=&#34;файловая-система-fat64-или-exfat&#34;&gt;&lt;strong&gt;Файловая Система FAT64 или exFAT&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;«exFAT» – это сокращенное обозначение от полного английского названия «Extended File Allocation Table» («расширенная таблица размещения файлов»). Стандарт является обновленной версией файловой системы «FAT32»,созданный корпорацией «Microsoft».Система exFAT чрезвычайно похожа на FAT32. Но главным отличием является устранение ограничений, присутствующих в файловой системе FAT32, что позволяет пользователям хранить файлы намного большего размера, чем четыре гигабайта.&lt;/p&gt;
&lt;p&gt;Также в файловой системе «exFAT» значительно снижено число перезаписей секторов, ответственных за непосредственное хранение информации, что особенно важно для флэш-накопителей, ввиду необратимого изнашивания ячеек после определённого количества операций записи, и улучшен механизм распределения свободного места.&lt;/p&gt;
&lt;h2 id=&#34;достоинства-и-недостатки-файловой-системы-fat&#34;&gt;&lt;strong&gt;Достоинства и Недостатки файловой системы FAT&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Конечно, файловая система FAT уже устарела и используется все больше в флэшкартах, чем в операционных системах. Однако также у нее остался и плюсы:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Файловая система FAT лучше всего работает для дисков и/или разделов примерно в 200 МБ, так как FAT начинается с очень мало накладных расходов.&lt;/li&gt;
&lt;li&gt;Поддерживается большинством устройств.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Но также существуют и минусы FAT:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Желательно, чтобы при использовании дисков или разделов более 200 МБ файловая система FAT не должна использоваться. Это потому, что по мере увеличения размера тома производительность с FAT быстро снижается.&lt;/li&gt;
&lt;li&gt;Низкая устойчивость с мягким сбоям;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Потерянные кластеры“&lt;/li&gt;
&lt;li&gt;Отсутствуют механизмы разграничения доступа&lt;/li&gt;
&lt;li&gt;Невозможно установить разрешения на файлы, которые являются разделамиFAT.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Как прошла моя четвертая неделя</title>
      <link>https://jerando4.github.io/ru/post/4-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F/</link>
      <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jerando4.github.io/ru/post/4-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;На четвертой неделе я сделал все лабораторные работы, которые доступны на данный момент.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Я всю неделю вкусно питался.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Я больше не знаю, что писать, поэтому я вставлю цитату Альберто Мангеля о Великой библиотеке:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&amp;ldquo;Мы можем бродить вдоль обугленных стеллажей Александрийской библиотеки, где собрано всё воображение и вся мудрость; и видеть в её гибели предупреждение о том, что всё, собранное нами, будет утрачено&amp;rdquo;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Языки научиного программирования</title>
      <link>https://jerando4.github.io/ru/post/%D1%8F%D0%B7%D1%8B%D0%BA%D0%B8-%D0%BD%D0%B0%D1%83%D1%87%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/</link>
      <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jerando4.github.io/ru/post/%D1%8F%D0%B7%D1%8B%D0%BA%D0%B8-%D0%BD%D0%B0%D1%83%D1%87%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/</guid>
      <description>&lt;p&gt;Существует как минимум 2 языка программирования:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Язык программирования Julia&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Язык программирования GNU Octave&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Сегодня мы поговорим о них.&lt;/p&gt;
&lt;h2 id=&#34;1-julia&#34;&gt;&lt;strong&gt;1. Julia&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Julia — это высокоуровневый, высокопроизводительный бесплатный язык программирования с динамической типизацией, созданный для математических вычислений. Он также эффективен для написания программ общего назначения.Синтаксис языка похож на синтаксис других математических языков (например, MATLAB и Octave), но имеет некоторые существенные отличия. Julia написана на C, C++ и Scheme. Стандартный пакет включает в себя JIT-компилятор на базе LLVM, благодаря которому, по словам авторов языка, приложения, написанные полностью на языке, практически не уступают по производительности приложениям, написанным на статически скомпилированных языках, таких как C или C++. Большая часть стандартной библиотеки языка написана на том же языке. Язык также имеет встроенную поддержку большого количества команд для распределенных вычислений.&lt;/p&gt;
&lt;p&gt;Язык динамичен, но использует JIT-компиляцию. Благодаря этому достигается высокая скорость приложений, написанных на &amp;ldquo;чистом&amp;rdquo; языке, без использования низкоуровневых библиотек и векторных операций. Поддерживается перегрузка функций и операторов (которые на самом деле также являются функциями), в то время как при желании вы можете указать тип для аргументов функции, который обычно недоступен в языках с динамически типизированной структурой. Это позволяет создавать специализированные версии функций и операторов для ускорения вычислений. Наиболее подходящая версия функции выбирается автоматически во время выполнения. Кроме того, благодаря перегрузке операторов можно создавать новые типы данных, которые ведут себя как встроенные типы.&lt;/p&gt;
&lt;p&gt;Одним из приоритетов в разработке языка является поддержка распределенных вычислений. Существует большое количество стандартных конструкций для распараллеливания кода.&lt;/p&gt;
&lt;h2 id=&#34;2-gnu-octave&#34;&gt;&lt;strong&gt;2. GNU Octave&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;GNU Octave — это бесплатная программная система для математических вычислений с использованием языка высокого уровня, совместимого с MATLAB.&lt;/p&gt;
&lt;p&gt;Octave - это интерактивный командный интерфейс для решения линейных и нелинейных математических задач, а также проведения других численных экспериментов. Кроме того, Octave можно использовать для пакетной обработки. Язык Octave оперирует арифметикой действительных и комплексных скаляров, векторов и матриц, имеет расширения для решения линейных алгебраических задач, нахождения корней систем нелинейных алгебраических уравнений, работы с полиномами, решения различных дифференциальных уравнений, интегрирования систем дифференциальных и дифференциально-алгебраических уравнений первого порядка, интегрирования функций на конечные и бесконечные интервалы. Этот список можно легко расширить с помощью языка Octave (или с помощью динамически загружаемых модулей, созданных на C, C++, Fortran и т.д.).
Вы можете использовать любые цифры в нумерованном списке — это не имеет значения. При преобразовании в HTML или другой формат числа станут правильными и последовательными (1, 2, 3 и т.д.).&lt;/p&gt;
&lt;p&gt;Octave - это интерпретируемый язык программирования. Он похож на C и поддерживает большинство основных функций стандартной библиотеки C, а также основные команды Unix и системные вызовы. С другой стороны, он не поддерживает передачу аргументов по ссылке (конструктивная особенность).&lt;/p&gt;
&lt;p&gt;The syntax of the language is very similar to MATLAB, and well-written scripts will run in both Octave and MATLAB.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Как прошла моя третья неделя</title>
      <link>https://jerando4.github.io/ru/post/3-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F/</link>
      <pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jerando4.github.io/ru/post/3-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;На третьей неделе я сделал все лабораторные работы, которые доступны на данный момент.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Я всю неделю вкусно питался.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;РИ научился писать программы на Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Я больше не знаю, что написать, поэтому цитата из одной из моих любимых видеоигр на русском языке:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;— Зло — это зло, Стрегобор, — серьёзно сказал ведьмак, вставая. — Меньшее, бо́льшее, среднее — всё едино, пропорции условны, а границы размыты. Я не святой отшельник, не только одно добро творил в жизни. Но если приходится выбирать между одним злом и другим, я предпочитаю не выбирать вообще. — «Последнее желание», рассказ «Меньшее зло»&amp;quot;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Создание презентации</title>
      <link>https://jerando4.github.io/ru/post/%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%B5%D0%B7%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D0%B8/</link>
      <pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jerando4.github.io/ru/post/%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%B5%D0%B7%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D0%B8/</guid>
      <description>&lt;p&gt;Хорошая презентация начинается с вопросов к самому себе. Самую важную часть вы можете сделать в блокноте, даже не включая компьютер. Сначала вы выбираете тему, определяете цель и распределяете аргументы в правильном порядке. И только теперь вы можете открыть программу и искать картинки для презентации.&lt;/p&gt;
&lt;h2 id=&#34;1-сформулируйте-тему&#34;&gt;&lt;strong&gt;1. Сформулируйте тему&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Трудно слушать собеседника, который перескакивает с одного на другое, поэтому в презентации должна быть только одна тема. В противном случае это будет долгая история ни о чем. Тема должна быть достаточно узкой, чтобы в конце предложить решение проблемы. Сужайте тему до тех пор, пока презентация не сможет быть представлена в десяти коротких абзацах.&lt;/p&gt;
&lt;p&gt;Легко определить хорошую тему — она подсказывает структуру самой речи.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;*** Широкая тема, мысли скачут***&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Публичные выступления&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Что такое публичные выступления&lt;/p&gt;
&lt;p&gt;Когда мы выступаем публично&lt;/p&gt;
&lt;p&gt;Как подготовиться&lt;/p&gt;
&lt;p&gt;Как работать с аудиторией&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;*** Узкая тема, история льется***&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Как справиться со страхом публичных выступлений&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Почему мы боимся&lt;/p&gt;
&lt;p&gt;Как перестать бояться&lt;/p&gt;
&lt;p&gt;Что делать, если вы выступаете в первый раз&lt;/p&gt;
&lt;h2 id=&#34;2-определите-цель&#34;&gt;&lt;strong&gt;2. Определите цель&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Хорошая презентация меняет нынешнюю картину мира. Например, люди начинают больше заботиться об окружающей среде или бегут за новым смартфоном. Цель не обязательно должна быть амбициозной, главное - конкретной.&lt;/p&gt;
&lt;p&gt;Хорошая цель презентации начинается с вопроса: что я хочу изменить в поведении слушателей.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Абстрактная цель&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Это хорошо, чтобы выступать&lt;/p&gt;
&lt;p&gt;Продайте продукт&lt;/p&gt;
&lt;p&gt;Покажите, что продукт хорош&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Конкретная цель&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Убедите, что новая модель потребляет на 20% меньше бензина&lt;/p&gt;
&lt;p&gt;Докажите, что продажи падают, но это нормально&lt;/p&gt;
&lt;p&gt;Убедите владельцев отвести своих животных на ежегодную вакцинацию&lt;/p&gt;
&lt;h2 id=&#34;3-продумайте-сценарий&#34;&gt;&lt;strong&gt;3. Продумайте сценарий&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Цель презентации - это то, что вы хотите изменить в голове слушателя, а сценарий - это то, как вы придете к этим изменениям.&lt;/p&gt;
&lt;p&gt;Представьте, что вы сочиняете историю. Слушатель должен быть заинтригован, придумать интересного героя, провести его через трудности к успешному финалу. Это основная структура любого текста и презентации. Сказки, сценарии фильмов и реклама товаров основаны на такой структуре&lt;/p&gt;
&lt;h2 id=&#34;4-правило-третей&#34;&gt;&lt;strong&gt;4. Правило третей&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Это правило создания презентаций помогает расположить объекты на слайде так, чтобы глаз сразу выделял самое важное. Разделите слайд на три части вдоль и поперек. Размещайте значимые объекты на перекрестках. Важными объектами являются названия и иллюстрации.&lt;/p&gt;
&lt;h2 id=&#34;5-тексты-короче&#34;&gt;&lt;strong&gt;5. Тексты короче&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Один слайд - это одна мысль. Этот слайд легко читать и запоминать. Если вы выступите публично, это привлечет внимание аудитории. Точное количество текста на слайде зависит от размера аудитории. Если человек читает презентацию на экране, абзац текста его не испугает. Если вы выступаете перед аудиторией из ста человек, вам будет трудно прочитать более десяти слов на слайде.&lt;/p&gt;
&lt;h2 id=&#34;6-добавление-изображений&#34;&gt;&lt;strong&gt;6. Добавление изображений&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Фотографии и значки помогают раскрыть содержание, но не должны заменять его. Если вы нашли красивую фотографию &amp;ldquo;в тему&amp;rdquo;, которая не помогает раскрыть идею, не используйте ее.&lt;/p&gt;
&lt;p&gt;You can use any numbers in the numbered list — it doesn&amp;rsquo;t matter. When converted to HTML or another format, the numbers will become correct and consistent (1, 2, 3, etc.).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Как прошла моя вторая неделя</title>
      <link>https://jerando4.github.io/ru/post/2-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F/</link>
      <pubDate>Sun, 08 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jerando4.github.io/ru/post/2-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;На второй неделе я сделал все лабораторные работы, которые доступны на данный момент.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Я всю неделю вкусно питался.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Вспомнил основы языка программирования C++&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Я больше не знаю, что написать, поэтому цитата из одной из моих любимых видеоигр на русском языке:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Говорят, моё место среди богов. Неправда. Я возвышаюсь над ними.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Язык разметки Markdown</title>
      <link>https://jerando4.github.io/ru/post/%D1%8F%D0%B7%D1%8B%D0%BA-%D1%80%D0%B0%D0%B7%D0%BC%D0%B5%D1%82%D0%BA%D0%B8-markdown/</link>
      <pubDate>Sun, 08 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jerando4.github.io/ru/post/%D1%8F%D0%B7%D1%8B%D0%BA-%D1%80%D0%B0%D0%B7%D0%BC%D0%B5%D1%82%D0%BA%D0%B8-markdown/</guid>
      <description>&lt;p&gt;&lt;em&gt;Markdown - это язык разметки текстов. Такие тексты легко писать и читать. Они могут быть легко преобразованы в HTML. Большинство программистов предпочитают Markdown для написания документации, описания своих проектов, ведения блогов и так далее.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;что-это-значит&#34;&gt;&lt;strong&gt;Что это значит?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Язык разметки&amp;rdquo; - это всего лишь набор соглашений, правил.&lt;/p&gt;
&lt;p&gt;Допустим, вы общаетесь с другом по SMS. Вы не можете сделать текст в них жирным или наклонным. Вы согласны с другом: если я напишу &lt;em&gt;что-то&lt;/em&gt; так между звездочками, то считайте это наклонным текстом. И если я напишу ** что-то ** между двумя звездочками, то считайте это жирным шрифтом. Ты придумал правила.&lt;/p&gt;
&lt;p&gt;Markdown - это набор аналогичных правил.&lt;/p&gt;
&lt;h2 id=&#34;почему-это-необходимо&#34;&gt;&lt;strong&gt;Почему это необходимо?&lt;/strong&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Добавить разметку в тех местах, где реальная разметка невозможна. Например, в простом текстовом файле или в том же SMS, где невозможно выделить жирным шрифтом, создать заголовки, выделить кавычки и т.д.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Для более удобного написания текстов для последующего преобразования в HTML или другие форматы.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;синтаксис-markdown&#34;&gt;&lt;strong&gt;Синтаксис Markdown&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Это краткое описание основных элементов синтаксиса Markdown. Единого стандарта не существует, и разные версии Markdown могут отличаться в деталях. Но основные элементы из приведенного ниже списка поддерживаются во всех стандартах.&lt;/p&gt;
&lt;h4 id=&#34;выделение-текста&#34;&gt;&lt;strong&gt;Выделение текста&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;*&lt;em&gt;Этот текст будет выделен наклонным шрифтом (курсивом).&lt;/em&gt;  *&lt;/p&gt;
&lt;p&gt;_ &lt;em&gt;Этот текст будет выделен наклонным шрифтом (курсивом)&lt;/em&gt; _&lt;/p&gt;
&lt;p&gt;** &lt;strong&gt;Этот текст будет выделен жирным шрифтом&lt;/strong&gt; **&lt;/p&gt;
&lt;p&gt;__ &lt;strong&gt;This text will be bold&lt;/strong&gt; __&lt;/p&gt;
&lt;p&gt;_ &lt;em&gt;Можно  ** &lt;strong&gt;вставить&lt;/strong&gt; ** один тип в другой&lt;/em&gt; _&lt;/p&gt;
&lt;h4 id=&#34;заголовки&#34;&gt;&lt;strong&gt;Заголовки&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#Это самый большой заголовок, он превращается в тег &amp;lt;h1&amp;gt;

##&amp;lt;h2&amp;gt;

###&amp;lt;h3&amp;gt;

####&amp;lt;h4&amp;gt;

#####&amp;lt;h5&amp;gt;

######&amp;lt;h6&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ссылки&#34;&gt;&lt;strong&gt;Ссылки&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com&lt;/a&gt; — текст простой ссылки автоматически станет кликабельной ссылкой&lt;/p&gt;
&lt;p&gt;Любой текст можно сделать ссылкой:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Это ссылка на GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;цитата&#34;&gt;&lt;strong&gt;Цитата&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;(&amp;gt;)Это мудрая цитата&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(&amp;gt;)Мудрый человек.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Пишите без скобок!!!&lt;/p&gt;
&lt;h4 id=&#34;списки&#34;&gt;&lt;strong&gt;Списки&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Ненумерованный список:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Пункт (*)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Еще один пункт (*)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Подпункт  (Tab + *)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Еще один подпункт (Tab + *)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Пишите без скобок и перед абзацами!!!&lt;/p&gt;
&lt;p&gt;Для подпунктов используйте TAB&lt;/p&gt;
&lt;h4 id=&#34;нумерованный-список&#34;&gt;&lt;strong&gt;Нумерованный список:&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Пункт&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Еще один момент&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Подпункт&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Еще один подпункт&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Для подпунктов используйте TAB&lt;/p&gt;
&lt;p&gt;Вы можете использовать любые цифры в нумерованном списке — это не имеет значения. При преобразовании в HTML или другой формат числа станут правильными и последовательными (1, 2, 3 и т.д.).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Как прошла моя первая неделя</title>
      <link>https://jerando4.github.io/ru/post/1-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F/</link>
      <pubDate>Fri, 06 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jerando4.github.io/ru/post/1-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;На прошлой неделе я сделал 3 лабораторные работы, а на самом деле 4, потому что суть одной лабораторной работы заключалась в том, что нужно было переписать отчет о предыдущей лабораторной работе, а затем написать отчет по этой работе.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Я всю неделю вкусно питался.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Он также защитил свой доклад на максимальное количество баллов. Он очень хорошо произнес монолог по-английски.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Я больше не знаю, что писать, поэтому вырезка из одной из моих любимых видеоигр на русском языке:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Появился, значит, в Зоне Чёрный сталкер. К лагерю ночью повадился ходить и там сует руку в палатку и говорит: «Водички попить!» А если не дашь хлебнуть из фляжки или наружу полезешь — пришибет! А раз мужик один решил пошутить: вылез тихо из палатки, надел кожаную перчатку и полез к соседям в палатку. Полез, значит, и попрошайничает жалостно: «Водички, водички попить…» А тут из палатки навстречу высовывается рука и за горло его — цап! И сиплый голосок отзывается тихонько: «А тебе моя водичка зачем нужна?!&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Управление версиями. Git.</title>
      <link>https://jerando4.github.io/ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./</link>
      <pubDate>Fri, 06 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jerando4.github.io/ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./</guid>
      <description>&lt;h2 id=&#34;обзор&#34;&gt;Обзор&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;О системе контроля версий&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Что такое &amp;ldquo;система контроля версий&amp;rdquo; и почему это важно? Система контроля версий - это система, которая записывает изменения в файл или набор файлов с течением времени и позволяет вам позже вернуться к определенной версии. Для контроля версий файлов в этой книге в качестве примера будет использоваться исходный код программного обеспечения, хотя на самом деле вы можете использовать контроль версий практически для любого типа файлов.&lt;/p&gt;
&lt;p&gt;Если вы графический или веб—дизайнер и хотите сохранять каждую версию изображения или макета (скорее всего, вы это сделаете), система контроля версий (далее именуемая SLE) - как раз то, что вам нужно. Это позволяет вам вернуть файлы в состояние, в котором они были до изменений, вернуть проект в исходное состояние, просмотреть изменения, посмотреть, кто в последний раз что-то менял и вызвал проблему, кто поставил задачу и когда, и многое другое. Использование SLE также в целом означает, что если вы что-то сломали или потеряли файлы, вы можете безопасно все исправить. В дополнение ко всему, вы получите все это без каких-либо дополнительных усилий.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Локальные системы контроля версий&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Многие люди используют копирование файлов в отдельный каталог в качестве метода контроля версий (возможно, даже в каталог с отметкой времени, если они достаточно умны). Этот подход очень распространен из-за своей простоты, но он невероятно подвержен ошибкам. Вы можете легко забыть, в каком каталоге вы находитесь, и случайно изменить неправильный файл или скопировать не те файлы, которые вы хотели.&lt;/p&gt;
&lt;p&gt;Чтобы решить эту проблему, программисты давно разработали local SLE с простой базой данных, которая хранит записи обо всех изменениях в файлах, тем самым отслеживая изменения.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Рисунок 1. Локальный контроль версий&#34; srcset=&#34;
               /ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./local_hufcb633eabb4ce248b64f5422c2c69f5a_20255_20822e8017c177cf18983f1a44f65d06.webp 400w,
               /ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./local_hufcb633eabb4ce248b64f5422c2c69f5a_20255_0de96a6d72e1228a7498fded8ce5b989.webp 760w,
               /ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./local_hufcb633eabb4ce248b64f5422c2c69f5a_20255_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://jerando4.github.io/ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./local_hufcb633eabb4ce248b64f5422c2c69f5a_20255_20822e8017c177cf18983f1a44f65d06.webp&#34;
               width=&#34;760&#34;
               height=&#34;649&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

&lt;em&gt;Рисунок 1. Локальный контроль версий&lt;/em&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Централизованные системы контроля версий&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Следующая серьезная проблема, с которой сталкиваются люди, - это необходимость взаимодействия с другими разработчиками. Чтобы справиться с этим, были разработаны централизованные системы управления версиями (CSKA). Такие системы, как CVS, Subversion и Perforce, используют единый сервер, содержащий все версии файлов, и ряд клиентов, которые получают файлы из этого централизованного хранилища. Использование ЦСКА было стандартом на протяжении многих лет.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Рисунок 2. Централизованное управление версиями&#34; srcset=&#34;
               /ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./centralized_hu74fb508a0af33a33fa0f541a94378552_22810_f93c80165d69b5e8aac99f5f188e2113.webp 400w,
               /ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./centralized_hu74fb508a0af33a33fa0f541a94378552_22810_b9d41468a9ebfde9114e38056a73f977.webp 760w,
               /ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./centralized_hu74fb508a0af33a33fa0f541a94378552_22810_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://jerando4.github.io/ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./centralized_hu74fb508a0af33a33fa0f541a94378552_22810_f93c80165d69b5e8aac99f5f188e2113.webp&#34;
               width=&#34;760&#34;
               height=&#34;528&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Рисунок 2. Централизованное управление версиями&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Этот подход имеет много преимуществ, особенно по сравнению с локальной СКВ. Например, все разработчики проектов в определенной степени знают, что делает каждый из них. Администраторы имеют полный контроль над тем, кто что может делать, и гораздо проще администрировать CSCS, чем управлять локальными базами данных на каждом клиенте.&lt;/p&gt;
&lt;p&gt;Несмотря на это, такой подход также имеет серьезные недостатки. Наиболее очевидным недостатком является единая точка отказа, представленная централизованным сервером. Если этот сервер выйдет из строя на час, то в течение этого времени никто не сможет использовать систему управления версиями для сохранения изменений, над которыми они работают, и никто не сможет поделиться этими изменениями с другими разработчиками. Если жесткий диск, на котором хранится центральная база данных, поврежден, и нет своевременных резервных копий, вы потеряете все — всю историю проекта, не считая отдельных снимков репозитория, которые были сохранены на локальных машинах разработчика. Локальные SLE страдают от той же проблемы: когда вся история проекта хранится в одном месте, вы рискуете потерять все.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Распределенные системы контроля версий&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Именно здесь в игру вступают распределенные системы контроля версий (RSCs). В RSKV (таких как Git, Mercurial, Bazaar или Darcs) клиенты не просто загружают снимок всех файлов (состояние файлов на определенный момент времени) — они полностью копируют репозиторий. В этом случае, если один из серверов, через который разработчики обменивались данными, умирает, любой клиентский репозиторий может быть скопирован на другой сервер для продолжения работы. Каждая копия хранилища представляет собой полную резервную копию всех данных.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Рисунок 3. Распределенный контроль версий&#34; srcset=&#34;
               /ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./distributed_hu7dff96406965f7bb87732a216019226c_26657_7cc702330d2d251a91f6efbc3ed41fb7.webp 400w,
               /ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./distributed_hu7dff96406965f7bb87732a216019226c_26657_c8b5ac17e6ced08e9f31c3db3ea44837.webp 760w,
               /ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./distributed_hu7dff96406965f7bb87732a216019226c_26657_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://jerando4.github.io/ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./distributed_hu7dff96406965f7bb87732a216019226c_26657_7cc702330d2d251a91f6efbc3ed41fb7.webp&#34;
               width=&#34;635&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Рисунок 3. Распределенный контроль версий&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Более того, многие RSCs могут одновременно взаимодействовать с несколькими удаленными репозиториями, благодаря этому вы можете работать с разными группами людей, используя разные подходы одновременно в рамках одного и того же проекта. Это позволяет применять сразу несколько подходов к разработке, например, иерархические модели, что совершенно невозможно в централизованных системах.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Что такое Git?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Короче говоря, что такое Git? Очень важно понять эту часть материала, потому что, если вы понимаете, что такое Git и основы того, как он работает, вам может быть намного проще его использовать. Пока вы изучаете Git, постарайтесь забыть все, что вы знаете о других SLE, таких как Subversion и Perforce. Это позволит вам избежать определенных проблем при использовании инструмента. Git хранит и использует информацию совершенно по-другому по сравнению с другими системами, хотя пользовательский интерфейс довольно похож, и понимание этих различий поможет вам избежать путаницы во время использования.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Моментальные снимки, а не различия&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Главное отличие Git от любого другого SLE (включая Subversion и его собратьев) — это подход к работе с вашими данными. Концептуально большинство других систем хранят информацию в виде списка изменений в файлах. Эти системы (CVS, Subversion, Perforce, Bazaar и т.д.) Представляют сохраненную информацию в виде набора файлов и изменений, вносимых в каждый файл с течением времени&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Почти все операции выполняются локально&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Для большинства операций в Git достаточно локальных файлов и ресурсов — в принципе, системе не нужна никакая информация с других компьютеров в вашей сети. Если вы привыкли к CSKA, где большинство операций страдают от задержек из-за работы с сетью, то этот аспект Git заставит вас подумать, что боги скорости наделили Git неисчислимой силой. Поскольку вся история проекта хранится непосредственно на вашем локальном диске, большинство операций кажутся почти мгновенными.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Целостность Git&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;В Git для всего вычисляется хэш-сумма, и только после этого происходит сохранение. В будущем доступ к сохраненным объектам осуществляется с использованием этой хэш-суммы. Это означает, что невозможно изменить содержимое файла или каталога без ведома Git. Эта функциональность встроена в Git на низком уровне и является неотъемлемой частью его философии. Вы не потеряете информацию во время ее передачи и не получите поврежденный файл без ведома Git.&lt;/p&gt;
&lt;p&gt;** Три государства**&lt;/p&gt;
&lt;p&gt;А теперь слушай внимательно. Это самое важное, что нужно помнить о Git, если вы хотите, чтобы остальная часть процесса обучения прошла гладко. Git имеет три основных состояния, в которых могут находиться ваши файлы: измененные, проиндексированные и зафиксированные:&lt;/p&gt;
&lt;p&gt;Измененные файлы включают файлы, которые были изменены, но еще не были зафиксированы.&lt;/p&gt;
&lt;p&gt;Индексированный - это измененный файл в его текущей версии, помеченный для включения в следующую фиксацию.&lt;/p&gt;
&lt;p&gt;Исправлено означает, что файл уже сохранен в вашей локальной базе данных.&lt;/p&gt;
&lt;p&gt;We have come to the three main sections of the Git project: the working copy (working tree), the indexing area (staging area) and the Git directory (Git directory).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
