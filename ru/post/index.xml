<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Academic</title>
    <link>https://jerando4.github.io/ru/post/</link>
      <atom:link href="https://jerando4.github.io/ru/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ru-ru</language><lastBuildDate>Sat, 14 May 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://jerando4.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://jerando4.github.io/ru/post/</link>
    </image>
    
    <item>
      <title>Как прошла моя третья неделя</title>
      <link>https://jerando4.github.io/ru/post/3-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F/</link>
      <pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jerando4.github.io/ru/post/3-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F/</guid>
      <description>&lt;h2 id=&#34;обзор&#34;&gt;Обзор&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;На третьей неделе я сделал все лабораторные работы, которые доступны на данный момент.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Я всю неделю вкусно питался.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;РИ научился писать программы на Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Я больше не знаю, что написать, поэтому цитата из одной из моих любимых видеоигр на русском языке:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;— Зло — это зло, Стрегобор, — серьёзно сказал ведьмак, вставая. — Меньшее, бо́льшее, среднее — всё едино, пропорции условны, а границы размыты. Я не святой отшельник, не только одно добро творил в жизни. Но если приходится выбирать между одним злом и другим, я предпочитаю не выбирать вообще. — «Последнее желание», рассказ «Меньшее зло»&amp;quot;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Создание презентации</title>
      <link>https://jerando4.github.io/ru/post/%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%B5%D0%B7%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D0%B8/</link>
      <pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jerando4.github.io/ru/post/%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%B5%D0%B7%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D0%B8/</guid>
      <description>&lt;h2 id=&#34;обзор&#34;&gt;&lt;strong&gt;Обзор&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Хорошая презентация начинается с вопросов к самому себе. Самую важную часть вы можете сделать в блокноте, даже не включая компьютер. Сначала вы выбираете тему, определяете цель и распределяете аргументы в правильном порядке. И только теперь вы можете открыть программу и искать картинки для презентации.&lt;/p&gt;
&lt;h2 id=&#34;1-сформулируйте-тему&#34;&gt;&lt;strong&gt;1. Сформулируйте тему&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Трудно слушать собеседника, который перескакивает с одного на другое, поэтому в презентации должна быть только одна тема. В противном случае это будет долгая история ни о чем. Тема должна быть достаточно узкой, чтобы в конце предложить решение проблемы. Сужайте тему до тех пор, пока презентация не сможет быть представлена в десяти коротких абзацах.&lt;/p&gt;
&lt;p&gt;Легко определить хорошую тему — она подсказывает структуру самой речи.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;*** Широкая тема, мысли скачут***&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Публичные выступления&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Что такое публичные выступления&lt;/p&gt;
&lt;p&gt;Когда мы выступаем публично&lt;/p&gt;
&lt;p&gt;Как подготовиться&lt;/p&gt;
&lt;p&gt;Как работать с аудиторией&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;*** Узкая тема, история льется***&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Как справиться со страхом публичных выступлений&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Почему мы боимся&lt;/p&gt;
&lt;p&gt;Как перестать бояться&lt;/p&gt;
&lt;p&gt;Что делать, если вы выступаете в первый раз&lt;/p&gt;
&lt;h2 id=&#34;2-определите-цель&#34;&gt;&lt;strong&gt;2. Определите цель&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Хорошая презентация меняет нынешнюю картину мира. Например, люди начинают больше заботиться об окружающей среде или бегут за новым смартфоном. Цель не обязательно должна быть амбициозной, главное - конкретной.&lt;/p&gt;
&lt;p&gt;Хорошая цель презентации начинается с вопроса: что я хочу изменить в поведении слушателей.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Абстрактная цель&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Это хорошо, чтобы выступать&lt;/p&gt;
&lt;p&gt;Продайте продукт&lt;/p&gt;
&lt;p&gt;Покажите, что продукт хорош&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Конкретная цель&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Убедите, что новая модель потребляет на 20% меньше бензина&lt;/p&gt;
&lt;p&gt;Докажите, что продажи падают, но это нормально&lt;/p&gt;
&lt;p&gt;Убедите владельцев отвести своих животных на ежегодную вакцинацию&lt;/p&gt;
&lt;h2 id=&#34;3-продумайте-сценарий&#34;&gt;&lt;strong&gt;3. Продумайте сценарий&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Цель презентации - это то, что вы хотите изменить в голове слушателя, а сценарий - это то, как вы придете к этим изменениям.&lt;/p&gt;
&lt;p&gt;Представьте, что вы сочиняете историю. Слушатель должен быть заинтригован, придумать интересного героя, провести его через трудности к успешному финалу. Это основная структура любого текста и презентации. Сказки, сценарии фильмов и реклама товаров основаны на такой структуре&lt;/p&gt;
&lt;h2 id=&#34;4-правило-третей&#34;&gt;&lt;strong&gt;4. Правило третей&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Это правило создания презентаций помогает расположить объекты на слайде так, чтобы глаз сразу выделял самое важное. Разделите слайд на три части вдоль и поперек. Размещайте значимые объекты на перекрестках. Важными объектами являются названия и иллюстрации.&lt;/p&gt;
&lt;h2 id=&#34;5-тексты-короче&#34;&gt;&lt;strong&gt;5. Тексты короче&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Один слайд - это одна мысль. Этот слайд легко читать и запоминать. Если вы выступите публично, это привлечет внимание аудитории. Точное количество текста на слайде зависит от размера аудитории. Если человек читает презентацию на экране, абзац текста его не испугает. Если вы выступаете перед аудиторией из ста человек, вам будет трудно прочитать более десяти слов на слайде.&lt;/p&gt;
&lt;h2 id=&#34;6-добавление-изображений&#34;&gt;&lt;strong&gt;6. Добавление изображений&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Фотографии и значки помогают раскрыть содержание, но не должны заменять его. Если вы нашли красивую фотографию &amp;ldquo;в тему&amp;rdquo;, которая не помогает раскрыть идею, не используйте ее.&lt;/p&gt;
&lt;p&gt;You can use any numbers in the numbered list — it doesn&amp;rsquo;t matter. When converted to HTML or another format, the numbers will become correct and consistent (1, 2, 3, etc.).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Markdown language</title>
      <link>https://jerando4.github.io/ru/post/%D1%8F%D0%B7%D1%8B%D0%BA-%D1%80%D0%B0%D0%B7%D0%BC%D0%B5%D1%82%D0%BA%D0%B8-markdown/</link>
      <pubDate>Sun, 08 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jerando4.github.io/ru/post/%D1%8F%D0%B7%D1%8B%D0%BA-%D1%80%D0%B0%D0%B7%D0%BC%D0%B5%D1%82%D0%BA%D0%B8-markdown/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Markdown is a markup language for texts. Such texts are easy to write and read. They can be easily converted to HTML. Most programmers prefer Markdown for writing documentation, describing their projects, writing blogs, and so on.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-does-it-mean&#34;&gt;&lt;strong&gt;What does it mean?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The &amp;ldquo;markup language&amp;rdquo; is just a set of conventions, rules.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say that you communicate with a friend by SMS. You can&amp;rsquo;t make the text bold or slanted in them. You agree with a friend: if I write * something* so between the asterisks, then consider it an oblique text. And if I write ** something ** between two asterisks, then consider it a bold text. You came up with the rules.&lt;/p&gt;
&lt;p&gt;Markdown is a set of similar rules.&lt;/p&gt;
&lt;h2 id=&#34;why-is-this-necessary&#34;&gt;&lt;strong&gt;Why is this necessary?&lt;/strong&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To add markup to places where real markup is not possible. For example, in a simple text file or in the same SMS, where it is impossible to highlight bold, create titles, highlight quotes, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For more convenient writing of texts for subsequent conversion to HTML or other formats.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;markdown-syntax&#34;&gt;&lt;strong&gt;Markdown syntax&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This is a quick reference of the basic elements of the Markdown syntax. There is no single standard and different versions of Markdown may differ in details. But the basic elements from the list below are supported in all standards.&lt;/p&gt;
&lt;h4 id=&#34;text-selection&#34;&gt;&lt;strong&gt;Text Selection&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;*&lt;em&gt;This text will be slanted (italics)&lt;/em&gt;  *&lt;/p&gt;
&lt;p&gt;_ &lt;em&gt;This text will be slanted (italics)&lt;/em&gt; _&lt;/p&gt;
&lt;p&gt;** &lt;strong&gt;This text will be bold&lt;/strong&gt; **&lt;/p&gt;
&lt;p&gt;__ &lt;strong&gt;This text will be bold&lt;/strong&gt; __&lt;/p&gt;
&lt;p&gt;_ &lt;em&gt;It is possible to ** &lt;strong&gt;insert&lt;/strong&gt; ** one type into another&lt;/em&gt; _&lt;/p&gt;
&lt;h4 id=&#34;headings&#34;&gt;&lt;strong&gt;Headings&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#This is the largest header, it turns into a &amp;lt;h1&amp;gt; tag

##&amp;lt;h2&amp;gt;

###&amp;lt;h3&amp;gt;

####&amp;lt;h4&amp;gt;

#####&amp;lt;h5&amp;gt;

######&amp;lt;h6&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;links&#34;&gt;&lt;strong&gt;Links&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com&lt;/a&gt; — the text of a simple link will become a clickable link automatically&lt;/p&gt;
&lt;p&gt;Any text can be made a link:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;This is a link to GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;quote&#34;&gt;&lt;strong&gt;Quote&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;(&amp;gt;)This is a wise quote&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(&amp;gt;)A wise man.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Write without brackets!!!&lt;/p&gt;
&lt;h4 id=&#34;lists&#34;&gt;&lt;strong&gt;Lists&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;An unnumbered list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Item (*)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One more point (*)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sub-item (Tab + *)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One more sub-item (Tab + *)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Write without brackets and before paragraphs!!!&lt;/p&gt;
&lt;p&gt;For sub-items, use TAB&lt;/p&gt;
&lt;h4 id=&#34;numbered-list&#34;&gt;&lt;strong&gt;Numbered list:&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Item&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One more point&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Sub-item&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One more sub-item&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For sub-items, use TAB&lt;/p&gt;
&lt;p&gt;You can use any numbers in the numbered list — it doesn&amp;rsquo;t matter. When converted to HTML or another format, the numbers will become correct and consistent (1, 2, 3, etc.).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Как прошла моя вторая неделя</title>
      <link>https://jerando4.github.io/ru/post/2-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F/</link>
      <pubDate>Sun, 08 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jerando4.github.io/ru/post/2-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F/</guid>
      <description>&lt;h2 id=&#34;обзор&#34;&gt;Обзор&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;На второй неделе я сделал все лабораторные работы, которые доступны на данный момент.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Я всю неделю вкусно питался.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Вспомнил основы языка программирования C++&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Я больше не знаю, что написать, поэтому цитата из одной из моих любимых видеоигр на русском языке:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Говорят, моё место среди богов. Неправда. Я возвышаюсь над ними.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Как прошла моя первая неделя</title>
      <link>https://jerando4.github.io/ru/post/1-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F/</link>
      <pubDate>Fri, 06 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jerando4.github.io/ru/post/1-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F/</guid>
      <description>&lt;h2 id=&#34;обзор&#34;&gt;&lt;strong&gt;Обзор&lt;/strong&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;На прошлой неделе я сделал 3 лабораторные работы, а на самом деле 4, потому что суть одной лабораторной работы заключалась в том, что нужно было переписать отчет о предыдущей лабораторной работе, а затем написать отчет по этой работе.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Я всю неделю вкусно питался.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Он также защитил свой доклад на максимальное количество баллов. Он очень хорошо произнес монолог по-английски.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Я больше не знаю, что писать, поэтому вырезка из одной из моих любимых видеоигр на русском языке:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Появился, значит, в Зоне Чёрный сталкер. К лагерю ночью повадился ходить и там сует руку в палатку и говорит: «Водички попить!» А если не дашь хлебнуть из фляжки или наружу полезешь — пришибет! А раз мужик один решил пошутить: вылез тихо из палатки, надел кожаную перчатку и полез к соседям в палатку. Полез, значит, и попрошайничает жалостно: «Водички, водички попить…» А тут из палатки навстречу высовывается рука и за горло его — цап! И сиплый голосок отзывается тихонько: «А тебе моя водичка зачем нужна?!&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Управление версиями. Git.</title>
      <link>https://jerando4.github.io/ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./</link>
      <pubDate>Fri, 06 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jerando4.github.io/ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./</guid>
      <description>&lt;h2 id=&#34;обзор&#34;&gt;Обзор&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;О системе контроля версий&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Что такое &amp;ldquo;система контроля версий&amp;rdquo; и почему это важно? Система контроля версий - это система, которая записывает изменения в файл или набор файлов с течением времени и позволяет вам позже вернуться к определенной версии. Для контроля версий файлов в этой книге в качестве примера будет использоваться исходный код программного обеспечения, хотя на самом деле вы можете использовать контроль версий практически для любого типа файлов.&lt;/p&gt;
&lt;p&gt;Если вы графический или веб—дизайнер и хотите сохранять каждую версию изображения или макета (скорее всего, вы это сделаете), система контроля версий (далее именуемая SLE) - как раз то, что вам нужно. Это позволяет вам вернуть файлы в состояние, в котором они были до изменений, вернуть проект в исходное состояние, просмотреть изменения, посмотреть, кто в последний раз что-то менял и вызвал проблему, кто поставил задачу и когда, и многое другое. Использование SLE также в целом означает, что если вы что-то сломали или потеряли файлы, вы можете безопасно все исправить. В дополнение ко всему, вы получите все это без каких-либо дополнительных усилий.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Локальные системы контроля версий&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Многие люди используют копирование файлов в отдельный каталог в качестве метода контроля версий (возможно, даже в каталог с отметкой времени, если они достаточно умны). Этот подход очень распространен из-за своей простоты, но он невероятно подвержен ошибкам. Вы можете легко забыть, в каком каталоге вы находитесь, и случайно изменить неправильный файл или скопировать не те файлы, которые вы хотели.&lt;/p&gt;
&lt;p&gt;Чтобы решить эту проблему, программисты давно разработали local SLE с простой базой данных, которая хранит записи обо всех изменениях в файлах, тем самым отслеживая изменения.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Рисунок 1. Локальный контроль версий&#34; srcset=&#34;
               /ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./local_hufcb633eabb4ce248b64f5422c2c69f5a_20255_20822e8017c177cf18983f1a44f65d06.webp 400w,
               /ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./local_hufcb633eabb4ce248b64f5422c2c69f5a_20255_0de96a6d72e1228a7498fded8ce5b989.webp 760w,
               /ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./local_hufcb633eabb4ce248b64f5422c2c69f5a_20255_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://jerando4.github.io/ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./local_hufcb633eabb4ce248b64f5422c2c69f5a_20255_20822e8017c177cf18983f1a44f65d06.webp&#34;
               width=&#34;760&#34;
               height=&#34;649&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

&lt;em&gt;Рисунок 1. Локальный контроль версий&lt;/em&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Централизованные системы контроля версий&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Следующая серьезная проблема, с которой сталкиваются люди, - это необходимость взаимодействия с другими разработчиками. Чтобы справиться с этим, были разработаны централизованные системы управления версиями (CSKA). Такие системы, как CVS, Subversion и Perforce, используют единый сервер, содержащий все версии файлов, и ряд клиентов, которые получают файлы из этого централизованного хранилища. Использование ЦСКА было стандартом на протяжении многих лет.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Рисунок 2. Централизованное управление версиями&#34; srcset=&#34;
               /ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./centralized_hu74fb508a0af33a33fa0f541a94378552_22810_f93c80165d69b5e8aac99f5f188e2113.webp 400w,
               /ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./centralized_hu74fb508a0af33a33fa0f541a94378552_22810_b9d41468a9ebfde9114e38056a73f977.webp 760w,
               /ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./centralized_hu74fb508a0af33a33fa0f541a94378552_22810_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://jerando4.github.io/ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./centralized_hu74fb508a0af33a33fa0f541a94378552_22810_f93c80165d69b5e8aac99f5f188e2113.webp&#34;
               width=&#34;760&#34;
               height=&#34;528&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Рисунок 2. Централизованное управление версиями&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Этот подход имеет много преимуществ, особенно по сравнению с локальной СКВ. Например, все разработчики проектов в определенной степени знают, что делает каждый из них. Администраторы имеют полный контроль над тем, кто что может делать, и гораздо проще администрировать CSCS, чем управлять локальными базами данных на каждом клиенте.&lt;/p&gt;
&lt;p&gt;Несмотря на это, такой подход также имеет серьезные недостатки. Наиболее очевидным недостатком является единая точка отказа, представленная централизованным сервером. Если этот сервер выйдет из строя на час, то в течение этого времени никто не сможет использовать систему управления версиями для сохранения изменений, над которыми они работают, и никто не сможет поделиться этими изменениями с другими разработчиками. Если жесткий диск, на котором хранится центральная база данных, поврежден, и нет своевременных резервных копий, вы потеряете все — всю историю проекта, не считая отдельных снимков репозитория, которые были сохранены на локальных машинах разработчика. Локальные SLE страдают от той же проблемы: когда вся история проекта хранится в одном месте, вы рискуете потерять все.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Распределенные системы контроля версий&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Именно здесь в игру вступают распределенные системы контроля версий (RSCs). В RSKV (таких как Git, Mercurial, Bazaar или Darcs) клиенты не просто загружают снимок всех файлов (состояние файлов на определенный момент времени) — они полностью копируют репозиторий. В этом случае, если один из серверов, через который разработчики обменивались данными, умирает, любой клиентский репозиторий может быть скопирован на другой сервер для продолжения работы. Каждая копия хранилища представляет собой полную резервную копию всех данных.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Рисунок 3. Распределенный контроль версий&#34; srcset=&#34;
               /ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./distributed_hu7dff96406965f7bb87732a216019226c_26657_7cc702330d2d251a91f6efbc3ed41fb7.webp 400w,
               /ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./distributed_hu7dff96406965f7bb87732a216019226c_26657_c8b5ac17e6ced08e9f31c3db3ea44837.webp 760w,
               /ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./distributed_hu7dff96406965f7bb87732a216019226c_26657_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://jerando4.github.io/ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git./distributed_hu7dff96406965f7bb87732a216019226c_26657_7cc702330d2d251a91f6efbc3ed41fb7.webp&#34;
               width=&#34;635&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Рисунок 3. Распределенный контроль версий&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Более того, многие RSCs могут одновременно взаимодействовать с несколькими удаленными репозиториями, благодаря этому вы можете работать с разными группами людей, используя разные подходы одновременно в рамках одного и того же проекта. Это позволяет применять сразу несколько подходов к разработке, например, иерархические модели, что совершенно невозможно в централизованных системах.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Что такое Git?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Короче говоря, что такое Git? Очень важно понять эту часть материала, потому что, если вы понимаете, что такое Git и основы того, как он работает, вам может быть намного проще его использовать. Пока вы изучаете Git, постарайтесь забыть все, что вы знаете о других SLE, таких как Subversion и Perforce. Это позволит вам избежать определенных проблем при использовании инструмента. Git хранит и использует информацию совершенно по-другому по сравнению с другими системами, хотя пользовательский интерфейс довольно похож, и понимание этих различий поможет вам избежать путаницы во время использования.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Моментальные снимки, а не различия&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Главное отличие Git от любого другого SLE (включая Subversion и его собратьев) — это подход к работе с вашими данными. Концептуально большинство других систем хранят информацию в виде списка изменений в файлах. Эти системы (CVS, Subversion, Perforce, Bazaar и т.д.) Представляют сохраненную информацию в виде набора файлов и изменений, вносимых в каждый файл с течением времени&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Почти все операции выполняются локально&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Для большинства операций в Git достаточно локальных файлов и ресурсов — в принципе, системе не нужна никакая информация с других компьютеров в вашей сети. Если вы привыкли к CSKA, где большинство операций страдают от задержек из-за работы с сетью, то этот аспект Git заставит вас подумать, что боги скорости наделили Git неисчислимой силой. Поскольку вся история проекта хранится непосредственно на вашем локальном диске, большинство операций кажутся почти мгновенными.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Целостность Git&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;В Git для всего вычисляется хэш-сумма, и только после этого происходит сохранение. В будущем доступ к сохраненным объектам осуществляется с использованием этой хэш-суммы. Это означает, что невозможно изменить содержимое файла или каталога без ведома Git. Эта функциональность встроена в Git на низком уровне и является неотъемлемой частью его философии. Вы не потеряете информацию во время ее передачи и не получите поврежденный файл без ведома Git.&lt;/p&gt;
&lt;p&gt;** Три государства**&lt;/p&gt;
&lt;p&gt;А теперь слушай внимательно. Это самое важное, что нужно помнить о Git, если вы хотите, чтобы остальная часть процесса обучения прошла гладко. Git имеет три основных состояния, в которых могут находиться ваши файлы: измененные, проиндексированные и зафиксированные:&lt;/p&gt;
&lt;p&gt;Измененные файлы включают файлы, которые были изменены, но еще не были зафиксированы.&lt;/p&gt;
&lt;p&gt;Индексированный - это измененный файл в его текущей версии, помеченный для включения в следующую фиксацию.&lt;/p&gt;
&lt;p&gt;Исправлено означает, что файл уже сохранен в вашей локальной базе данных.&lt;/p&gt;
&lt;p&gt;We have come to the three main sections of the Git project: the working copy (working tree), the indexing area (staging area) and the Git directory (Git directory).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
